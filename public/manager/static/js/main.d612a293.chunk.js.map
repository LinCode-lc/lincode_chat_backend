{"version":3,"sources":["components/logo/logo.jpg","components/logo/logo.jsx","redux/action-types.js","api/ajax.js","api/index.js","redux/action.js","containers/login/login.jsx","components/header-selector/header-selector.jsx","containers/dashen-info/dashen-info.jsx","containers/laoban-info/laoban-info.jsx","components/user-list/user-list.jsx","containers/laoban/laoban.jsx","containers/dashen/dashen.jsx","containers/message/message.jsx","containers/personal/personal.jsx","utils/index.js","components/nav-footer/nav-footer.jsx","containers/chat/chat.jsx","containers/main/main.jsx","containers/register/register.jsx","redux/reducers.js","redux/store.js","index.js"],"names":["Logo","className","src","logo","alt","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_MSG_LIST","RECEIVE_MSG","MSG_READ","ajax","url","data","type","str","Object","keys","forEach","key","substring","length","axios","get","post","reqRegister","user","reqUpdataUser","reqUserList","reqChatMsgList","reqReadMsg","from","initIO","dispatch","userid","io","socket","on","chatMsg","console","log","to","receiveMsg","authSuccess","errorMsg","msg","receiveUser","resetUser","receiveMsgList","users","chatMsgs","msgRead","count","getMsgList","a","response","result","code","updateUser","getUserList","Login","state","username","password","login","props","handleChange","name","val","setState","toRegister","history","push","this","redirectTo","placeholder","onChange","onClick","Component","connect","_id","HeaderSelector","icon","handleClick","text","setHeader","headerList","i","listHeader","renderHeader","columnNum","DashenInfo","header","info","save","value","path","title","rows","LaobanInfo","company","salary","Header","Body","UserList","userList","style","marginBottom","marginTop","map","thumb","extra","withRouter","Laoban","Dashen","Item","Brief","Message","chat","lastMsgs","lastMsgObjs","element","read","unReadCount","chat_id","preUnReadCount","create_time","values","sort","m1","m2","getLastMsgs","targetUserId","targetUser","arrow","content","Personal","handleLogout","alert","onPress","Cookies","remove","img","message","multipleLine","getRedirectTo","NavFooter","navList","filter","nav","hide","location","pathname","badge","uri","selectedIcon","selected","replace","propsType","PropsType","array","isRequired","Chat","isShow","handleSend","match","params","trim","sendMsg","toggleShow","setTimeout","window","dispatchEvent","Event","chooseEmoji","item","emojis","emoji","scrollTo","document","body","scrollHeight","readMsg","meId","targetId","chatId","join","msgs","targetName","id","onLeftClick","goBack","onFocus","marginRight","carouselMaxRow","isCarousel","emit","Main","component","getUser","currentNav","find","ListItem","Register","password2","register","toLogin","checked","initUser","initUserList","initChat","combineReducers","action","reduce","preTotal","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.d612a293.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.12c9441b.jpg\";","import React from 'react'\r\n\r\nimport logo from './logo.jpg'\r\nimport './logo.css'\r\nexport default function Logo() {\r\n    return (\r\n        <div className=\"logo-container\">\r\n            <img src={logo} alt=\"logo\" className=\"logo-img\" />\r\n        </div>\r\n    )\r\n}\r\n","export const AUTH_SUCCESS = 'auth_success'\r\nexport const ERROR_MSG = 'error_msg'\r\nexport const RECEIVE_USER = 'receive_user' //接收用户\r\nexport const RESET_USER = 'reset_user' //重置用户\r\nexport const RECEIVE_USER_LIST = 'receive_user_list'//用户列表\r\nexport const RECEIVE_MSG_LIST = 'receive_msg_list'//接收所有相关消息\r\nexport const RECEIVE_MSG = 'receive_msg' //接收一条消息\r\nexport const MSG_READ = 'msg_read'//查看了某个聊天\r\n","// 能发送ajax请求的函数模块\r\n// 函数的返回值是promise对象\r\nimport axios from 'axios'\r\nexport default function ajax(url, data = {}, type = 'GET') {\r\n    if (type === 'GET') {\r\n        let str = ''\r\n        Object.keys(data).forEach((key) => {\r\n            str = str + key + \"=\" + data[key] + \"&\"\r\n        })\r\n        if (str) {\r\n            str = \"?\" + str.substring(0, str.length - 1)\r\n        }\r\n        return axios.get(url + str)\r\n    } else {\r\n        return axios.post(url, data)\r\n    }\r\n\r\n}","import ajax from './ajax'\r\n\r\nexport const reqRegister = (user) => ajax('/register', user, 'POST')\r\nexport const reqLogin = ({ username, password }) => ajax('/login', { username, password }, 'POST')\r\nexport const reqUpdataUser = (user) => ajax('/update', user, 'POST')\r\nexport const reqUser = () => ajax('/user')\r\nexport const reqUserList = (type) => ajax('/userlist', { type })\r\n//获取当前用户的聊天信息列表\r\nexport const reqChatMsgList = () => ajax('/msglist')\r\n//修改指定消息为已读\r\nexport const reqReadMsg = (from) => ajax('/readmsg', { from }, 'POST')","import {\r\n    AUTH_SUCCESS,\r\n    ERROR_MSG,\r\n    RECEIVE_MSG,\r\n    RECEIVE_MSG_LIST,\r\n    RECEIVE_USER,\r\n    RECEIVE_USER_LIST,\r\n    RESET_USER,\r\n    MSG_READ\r\n} from './action-types'\r\n\r\n\r\n//注册和登录是异步的，所以要创建异步action\r\nimport {\r\n    reqRegister,\r\n    reqLogin,\r\n    reqUpdataUser,\r\n    reqUser,\r\n    reqUserList,\r\n    reqChatMsgList,\r\n    reqReadMsg\r\n} from '../api'\r\n//引入客户端io\r\nimport { io } from 'socket.io-client'\r\n\r\nfunction initIO(dispatch, userid) {\r\n    // 1创建对象之前：判断对象是否已经创建，没创建才创建\r\n    if (!io.socket) {\r\n        //连接服务器，得到与服务器的连接对象\r\n        io.socket = io(\"ws://localhost:3003\")\r\n        io.socket.on('receiveMsg', function (chatMsg) {\r\n            console.log(\"客户端接收到的消息\", chatMsg)\r\n            //只有当chatMsg是与当前用户相关的消息，才会去分发同步action\r\n            if (userid === chatMsg.from || userid === chatMsg.to) {\r\n                dispatch(receiveMsg(chatMsg, userid))\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\n\r\n//授权成功的同步action\r\nconst authSuccess = (user) => ({ type: AUTH_SUCCESS, data: user })\r\n//错误提示的同步action\r\nconst errorMsg = (msg) => ({ type: ERROR_MSG, data: msg })\r\n//接收用户的同步action\r\nconst receiveUser = (user) => ({ type: RECEIVE_USER, data: user })\r\n//重置用户的同步action\r\nexport const resetUser = (msg) => ({ type: RESET_USER, data: msg })\r\n//获取用户列表的同步action\r\nconst receiveUserList = (users) => ({ type: RECEIVE_USER_LIST, data: users })\r\n//获取消息列表的同步action\r\nconst receiveMsgList = ({ users, chatMsgs, userid }) => ({ type: RECEIVE_MSG_LIST, data: { users, chatMsgs, userid } })\r\n//接收一个消息的同步action  \r\nconst receiveMsg = (chatMsg, userid) => ({ type: RECEIVE_MSG, data: { chatMsg, userid } })\r\n//读取了某个聊天消息的同步action\r\nconst msgRead = ({ count, from, to }) => ({ type: MSG_READ, data: { count, from, to } })\r\n\r\n//异步获取消息列表数据\r\nasync function getMsgList(dispatch, userid) {\r\n    initIO(dispatch, userid)\r\n    const response = await reqChatMsgList()\r\n    const result = response.data\r\n    if (result.code === 0) {\r\n        const { users, chatMsgs } = result.data\r\n        dispatch(receiveMsgList({ users, chatMsgs, userid }))\r\n    }\r\n}\r\n//注册异步action\r\nexport const register = (user) => {\r\n    const { username, password, password2, type } = user\r\n    //做表单的前台检查，如果不通过，返回一个errorMsg的同步action\r\n    if (!username) {\r\n        return errorMsg(\"用户名必须指定\")\r\n    }\r\n    else if (password !== password2) {\r\n        return errorMsg(\"两次密码不一致\")\r\n    }\r\n    //表单数据合法，返回一个发ajax请求的异步action\r\n    //异步action返回的是一个函数\r\n    return async dispatch => {\r\n        let result = await reqRegister({ username, password, type })\r\n        result = result.data\r\n        console.log(result)\r\n        if (result.code === 0) {\r\n            getMsgList(dispatch, result.data._id)\r\n            dispatch(authSuccess(result.data))\r\n        } else {\r\n            dispatch(errorMsg(result.msg))\r\n        }\r\n    }\r\n}\r\n\r\n//登录异步action\r\nexport const login = (user) => {\r\n    console.log(user)\r\n    const { username, password } = user\r\n    //做表单的前台检查，如果不通过，返回一个errorMsg的同步action\r\n    if (!username) {\r\n        return errorMsg(\"用户名必须指定\")\r\n    }\r\n    else if (!password) {\r\n        return errorMsg(\"密码必须指定\")\r\n    }\r\n    //表单数据合法，返回一个发ajax请求的异步action\r\n    //异步action返回的是一个函数\r\n    return async dispatch => {\r\n        const response = await reqLogin(user)\r\n        console.log(response)\r\n        const result = response.data\r\n        if (result.code === 0) {\r\n            getMsgList(dispatch, result.data._id)\r\n            console.log(result.data)\r\n            dispatch(authSuccess(result.data))\r\n        } else {\r\n            dispatch(errorMsg(result.msg))\r\n        }\r\n    }\r\n}\r\n\r\n//更新用户信息\r\nexport const updateUser = (user) => {\r\n    return async dispatch => {\r\n        const response = await reqUpdataUser(user)\r\n        const result = response.data\r\n        if (result.code === 0) {\r\n            dispatch(receiveUser(result.data))\r\n        } else {\r\n            dispatch(resetUser(result.msg))\r\n        }\r\n    }\r\n}\r\n\r\n//获取用户异步action\r\nexport const getUser = () => {\r\n    return async dispatch => {\r\n        const response = await reqUser()\r\n        const result = response.data\r\n        if (result.code === 0) {\r\n            getMsgList(dispatch, result.data._id)\r\n            dispatch(receiveUser(result.data))\r\n        } else {\r\n            dispatch(resetUser(result.msg))\r\n        }\r\n    }\r\n}\r\n\r\n//获取用户列表的异步action\r\nexport const getUserList = (type) => {\r\n    return async dispatch => {\r\n        const response = await reqUserList(type);\r\n        const result = response.data\r\n        if (result.code === 0) {\r\n            dispatch(receiveUserList(result.data))\r\n        }\r\n    }\r\n}\r\n\r\n//发送消息的异步action\r\nexport const sendMsg = ({ from, to, content }) => {\r\n    return async dispatch => {\r\n\r\n        io.socket.emit('sendMsg', { from, to, content })\r\n    }\r\n}\r\n\r\n//读取消息的异步action\r\nexport const readMsg = (from, to) => {\r\n    return async dispatch => {\r\n        const response = await reqReadMsg(from)\r\n        const result = response.data\r\n        const count = result.data\r\n        console.log(count)\r\n        console.log(from)\r\n        console.log(to)\r\n        if (result.code === 0) {\r\n            dispatch(msgRead({ count, from, to }))\r\n        }\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Logo from '../../components/logo/logo'\r\nimport {\r\n    NavBar,\r\n    WingBlank,\r\n    List,\r\n    InputItem,\r\n    WhiteSpace,\r\n\r\n    Button,\r\n} from 'antd-mobile'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../redux/action'\r\nimport { Redirect } from 'react-router-dom'\r\n// const ListItem = List.Item\r\n\r\n\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        username: '',\r\n        password: '',\r\n\r\n    }\r\n    login = () => {\r\n\r\n        this.props.login(this.state)\r\n    }\r\n    handleChange = (name, val) => {\r\n        //更新状态\r\n        //因为这里传的name的字符串，所以要用[]接\r\n        this.setState({\r\n            [name]: val\r\n        })\r\n    }\r\n    //跳转登录\r\n    toRegister = () => {\r\n        this.props.history.push('/register')\r\n\r\n    }\r\n    render() {\r\n\r\n        // const { type } = this.state\r\n        const { msg, redirectTo } = this.props.user\r\n\r\n        if (redirectTo) {\r\n            return <Redirect to={redirectTo} />\r\n        }\r\n        return (\r\n            <div>\r\n                <NavBar>广&nbsp;工&nbsp;直&nbsp;聘</NavBar>\r\n                <Logo></Logo>\r\n                <WingBlank>\r\n                    <List>\r\n                        {msg ? <div className=\"error-msg\">{msg}</div> : null}\r\n                        <WhiteSpace />\r\n                        <InputItem placeholder=\"请输入用户名\" onChange={val => { this.handleChange('username', val) }}>用户名:</InputItem>\r\n                        <WhiteSpace />\r\n                        <InputItem placeholder=\"请输入密码\" type=\"password\" onChange={val => { this.handleChange('password', val) }}>密&nbsp;&nbsp;&nbsp;码:</InputItem>\r\n                        <WhiteSpace />\r\n\r\n                        <Button type=\"primary\" onClick={this.login}>登&nbsp;&nbsp;&nbsp;录</Button>\r\n                        <WhiteSpace />\r\n                        <Button onClick={this.toRegister}>去注册</Button>\r\n                    </List>\r\n                </WingBlank>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ user: state.user }),\r\n    { login }\r\n)(Login)\r\n","// 选择用户头像的ui\r\n\r\nimport React, { Component } from 'react'\r\nimport { List, Grid } from 'antd-mobile'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class HeaderSelector extends Component {\r\n\r\n    static propTypes = {\r\n        setHeader: PropTypes.func.isRequired\r\n    }\r\n    state = {\r\n        icon: null\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.headerList = []\r\n        for (let i = 0; i < 5; i++) {\r\n            this.headerList.push(\r\n                {\r\n                    text: 'header' + (i + 1),\r\n                    icon: `/images/header${i + 1}.jpg`\r\n                }\r\n            )\r\n        }\r\n    }\r\n    handleClick = ({ text, icon }) => {\r\n        //更新当前状态\r\n        this.setState({ icon })\r\n        //更新父组件状态\r\n\r\n        this.props.setHeader(text)\r\n    }\r\n    render() {\r\n        const { icon } = this.state\r\n        const listHeader = icon ? (<div>已选择头像<img src={icon}></img></div>) : '请选择头像'\r\n        return (\r\n            <List renderHeader={() => listHeader}>\r\n                <Grid data={this.headerList}\r\n                    columnNum={3} onClick={this.handleClick}></Grid>\r\n            </List>\r\n        )\r\n    }\r\n}\r\n","// 大神信息完善的路由容器组件\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { NavBar, InputItem, TextareaItem, Button } from 'antd-mobile'\r\nimport HeaderSelector from '../../components/header-selector/header-selector'\r\nimport { updateUser } from '../../redux/action'\r\nimport { Redirect } from 'react-router-dom'\r\nclass DashenInfo extends Component {\r\n    state = {\r\n        header: '',\r\n        post: '',\r\n        info: '',\r\n\r\n    }\r\n    save = () => {\r\n        this.props.updateUser(this.state)\r\n    }\r\n    setHeader = (header) => {\r\n        this.setState({\r\n            header\r\n        })\r\n\r\n    }\r\n    handleChange = (name, value) => {\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n\r\n    }\r\n    render() {\r\n        const { header, type } = this.props.user\r\n        if (header) {  //信息已经完善\r\n            const path = type === 'dashen' ? '/dashen' : 'laoban'\r\n            return <Redirect to={path} />\r\n        }\r\n        return (\r\n            <div>\r\n                <NavBar>大神信息完善</NavBar>\r\n                <HeaderSelector setHeader={this.setHeader} />\r\n                <InputItem placeholder=\"请输入求职岗位\" onChange={val => { this.handleChange('post', val) }}>求职岗位</InputItem>\r\n                <TextareaItem title=\"个人介绍:\" rows={3} onChange={val => { this.handleChange('info', val) }}></TextareaItem>\r\n\r\n\r\n\r\n                <Button type=\"primary\" onClick={this.save}>保&nbsp;&nbsp;&nbsp;&nbsp;存</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    state => ({ user: state.user }),\r\n    { updateUser }\r\n)(DashenInfo)","// 大神信息完善的路由容器组件\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { NavBar, InputItem, TextareaItem, Button } from 'antd-mobile'\r\nimport HeaderSelector from '../../components/header-selector/header-selector'\r\nimport { updateUser } from '../../redux/action'\r\nimport { Redirect } from 'react-router-dom'\r\nclass LaobanInfo extends Component {\r\n    state = {\r\n        header: '',\r\n        post: '',\r\n        info: '',\r\n        company: '',\r\n        salary: ''\r\n    }\r\n    save = () => {\r\n        this.props.updateUser(this.state)\r\n    }\r\n    setHeader = (header) => {\r\n        this.setState({\r\n            header\r\n        })\r\n        console.log(this.setState)\r\n    }\r\n    handleChange = (name, value) => {\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n\r\n    }\r\n    render() {\r\n        const { header, type } = this.props.user\r\n        if (header) {  //信息已经完善\r\n            const path = type === 'dashen' ? '/dashen' : 'laoban'\r\n            return <Redirect to={path} />\r\n        }\r\n        return (\r\n            <div>\r\n                <NavBar>老板信息完善</NavBar>\r\n                <HeaderSelector setHeader={this.setHeader} />\r\n                <InputItem placeholder=\"请输入招聘职位\" onChange={val => { this.handleChange('post', val) }}>招聘职位</InputItem>\r\n                <InputItem placeholder=\"请输入公司名称\" onChange={val => { this.handleChange('company', val) }}>公司名称</InputItem>\r\n                <InputItem placeholder=\"请输入职位薪资\" onChange={val => { this.handleChange('salary', val) }}>职位薪资</InputItem>\r\n                <TextareaItem title=\"职位要求:\" rows={3} onChange={val => { this.handleChange('info', val) }}></TextareaItem>\r\n                <Button type=\"primary\" onClick={this.save}>保&nbsp;&nbsp;&nbsp;&nbsp;存</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    state => ({ user: state.user }),\r\n    { updateUser }\r\n)(LaobanInfo)","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { WingBlank, WhiteSpace, Card, } from 'antd-mobile'\r\nimport './user-list.css'\r\nimport { withRouter } from 'react-router-dom'\r\nimport QueueAnim from 'rc-queue-anim'\r\nconst Header = Card.Header\r\nconst Body = Card.Body\r\nclass UserList extends Component {\r\n    static propTypes = {\r\n        userList: PropTypes.array.isRequired\r\n    }\r\n    render() {\r\n        const { userList } = this.props\r\n        console.log(userList)\r\n        return (\r\n            <WingBlank style={{ marginBottom: 50, marginTop: 50 }}>\r\n                <QueueAnim type=\"scale\" >\r\n                    {\r\n                        userList.map(user =>\r\n                            <div key={user._id}>\r\n                                <WhiteSpace></WhiteSpace>\r\n                                <Card onClick={() => { this.props.history.push(`/chat/${user._id}`) }}>\r\n                                    <Header thumb={<div className=\"header\"><img src={`/images/${user.header}.jpg`} /></div>}\r\n                                        extra={user.username}>\r\n\r\n                                    </Header>\r\n                                    <Body>\r\n                                        <div>职位:&nbsp;&nbsp;{user.post}</div>\r\n                                        {user.company ? <div>公司:&nbsp;&nbsp;{user.company}</div> : null}\r\n                                        {user.salary ? <div>薪资:&nbsp;&nbsp;{user.salary}</div> : null}\r\n                                        <div>描述:&nbsp;&nbsp;{user.info}</div>\r\n                                    </Body>\r\n                                </Card>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </QueueAnim>\r\n            </WingBlank>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(UserList)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport UserList from '../../components/user-list/user-list'\r\nimport { getUserList } from '../../redux/action'\r\nclass Laoban extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.getUserList('dashen')\r\n    }\r\n    render() {\r\n        const userList = this.props.userList\r\n        return (\r\n            <div>\r\n                <UserList userList={userList}></UserList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n        userList: state.userList\r\n    }),\r\n    { getUserList }\r\n)(Laoban)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport UserList from '../../components/user-list/user-list'\r\nimport { getUserList } from '../../redux/action'\r\nclass Dashen extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.getUserList('laoban')\r\n    }\r\n    render() {\r\n        const userList = this.props.userList\r\n        console.log(userList)\r\n        return (\r\n            <div>\r\n\r\n                <UserList userList={userList}></UserList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n        userList: state.userList\r\n    }),\r\n    { getUserList }\r\n)(Dashen)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Badge, List } from 'antd-mobile';\r\nimport './message.css'\r\nconst Item = List.Item\r\nconst Brief = List.Item.Brief\r\n//对chatMsg按chat_id进行分组，并得到每个组的lastMsg组成的数组\r\n// 1找出每个聊天的LastMsg,并用一个对象容器保存{chat_id,lastMsg}\r\n// 2得到所有LastMsg的数组\r\n// 3对数组进行排序(按creat_time降序)\r\nfunction getLastMsgs(chatMsgs, userid) {\r\n    let lastMsgObjs = {}\r\n    chatMsgs.forEach(element => {\r\n        if (element.to === userid && !element.read) {\r\n            element.unReadCount = 1\r\n        } else {\r\n            element.unReadCount = 0\r\n        }\r\n\r\n        if (lastMsgObjs[element.chat_id]) {\r\n            //保存已经统计的未读数量\r\n            let preUnReadCount = lastMsgObjs[element.chat_id].unReadCount\r\n            if (lastMsgObjs[element.chat_id].create_time < element.create_time) {\r\n                lastMsgObjs[element.chat_id] = element\r\n            }\r\n            //累加\r\n            lastMsgObjs[element.chat_id].unReadCount = preUnReadCount + element.unReadCount\r\n\r\n        } else {\r\n            lastMsgObjs[element.chat_id] = element\r\n        }\r\n\r\n    });\r\n    //得到所有的LastMsg数组\r\n    const lastMsgs = Object.values(lastMsgObjs)\r\n    //排序\r\n    lastMsgs.sort(function (m1, m2) {  //如果小于零，将m1放前面\r\n        return m2.create_time - m1.create_time\r\n\r\n    })\r\n    return lastMsgs\r\n}\r\nclass Message extends Component {\r\n\r\n    render() {\r\n        const { user } = this.props\r\n        const { users, chatMsgs } = this.props.chat\r\n        //对chatMsgs按chat_id进行分组\r\n        const lastMsgs = getLastMsgs(chatMsgs, user._id)\r\n        return (\r\n            <List style={{ marginTop: 50, marginBottom: 50 }}>\r\n                {lastMsgs.map(msg => {\r\n                    const targetUserId = msg.to === user._id ? msg.from : msg.to\r\n                    const targetUser = msg.to === user._id ? users[msg.from] : users[msg.to]\r\n                    const header = targetUser.header ? `/images/${targetUser.header}.jpg` : null\r\n                    console.log(targetUser)\r\n                    return (\r\n                        <Item\r\n                            key={msg._id}\r\n                            extra={<Badge text={msg.unReadCount} />}\r\n                            thumb={<div className='messageHeader'><img src={header} /></div>}\r\n                            arrow='horizontal'\r\n                            onClick={() => this.props.history.push(`/chat/${targetUserId}`)}\r\n                        >\r\n                            {users[msg.to === user._id ? msg.from : msg.to].username}\r\n                            <Brief>\r\n                                {msg.content}\r\n\r\n                            </Brief>\r\n                        </Item>\r\n                    )\r\n                }\r\n\r\n                )}\r\n            </List>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    state => ({\r\n        user: state.user,\r\n        chat: state.chat\r\n    }),\r\n    {}\r\n)(Message)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Result, List, WhiteSpace, Button, Modal } from 'antd-mobile'\r\nimport Cookies from 'js-cookie'\r\nimport { resetUser } from '../../redux/action'\r\nimport './personal.css'\r\nconst Item = List.Item\r\nconst Brief = Item.Brief\r\nclass Personal extends Component {\r\n    handleLogout = () => {\r\n        Modal.alert('退出', '确认退出登录吗', [\r\n            {\r\n                text: '取消',\r\n\r\n            },\r\n            {\r\n                text: '确认',\r\n                onPress: () => {\r\n                    //清除cookie的userid\r\n                    Cookies.remove('userid')\r\n                    //清除redux的user\r\n                    this.props.resetUser()\r\n                }\r\n            }\r\n        ])\r\n    }\r\n    render() {\r\n        console.log(this.props.user)\r\n        const { username, info, salary, header, post, company } = this.props.user\r\n        return (\r\n            <div style={{ marginBottom: 50, marginTop: 50 }}>\r\n                <Result\r\n                    img={<div className=\"personHeader \"><img src={`/images/${header}.jpg`} alt=\"header\" /></div>}\r\n                    title={username}\r\n                    message={company}\r\n                />\r\n                <List renderHeader={() => '请输入相关信息'}>\r\n                    <Item multipleLine>\r\n                        <Brief>职位:&nbsp;&nbsp;{post}</Brief>\r\n                        <Brief>简介:&nbsp;&nbsp;{info}</Brief>\r\n                        {salary ? <Brief>薪资:&nbsp;&nbsp;{salary}</Brief> : null}\r\n                    </Item>\r\n                </List>\r\n                <WhiteSpace></WhiteSpace>\r\n                <List>\r\n                    <Button type=\"warning\" onClick={this.handleLogout}>退出登录</Button>\r\n                </List>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    state => ({ user: state.user }),\r\n    { resetUser }\r\n)(Personal)\r\n","// 包含n个工具函数的模块\r\nexport function getRedirectTo(type, header) {\r\n    let path = ''\r\n    if (type === 'laoban') {\r\n        path = '/laoban'\r\n    } else {\r\n        path = '/dashen'\r\n    }\r\n\r\n    if (!header) {\r\n        path += 'info'\r\n    }\r\n    return path\r\n}","import React, { Component } from 'react'\r\nimport { TabBar } from 'antd-mobile'\r\nimport PropsType from 'prop-types'\r\nimport { withRouter } from 'react-router'  //让非路由组件可以用路由组件的api\r\n\r\nclass NavFooter extends Component {\r\n    static propsType = {\r\n        navList: PropsType.array.isRequired\r\n    }\r\n    render() {\r\n        let { navList, unReadCount } = this.props\r\n        navList = navList.filter(nav => !nav.hide)\r\n        //因为该组件不是路由组件，所以没办法拿到location\r\n        // icon={{ uri: require(`./images/${val.icon}.svg`) }}\r\n        const path = this.props.location.pathname\r\n        return (\r\n            <TabBar>\r\n\r\n                {\r\n                    navList.map((val) =>\r\n                        <TabBar.Item\r\n                            key={val.path}\r\n                            badge={val.path === '/message' ? unReadCount : 0}\r\n                            title={val.text}\r\n                            icon={{ uri: `/images/${val.icon}.svg` }}\r\n                            selectedIcon={{ uri: `/images/${val.icon}-selected.svg` }}\r\n                            selected={val.path === path}\r\n                            onPress={() => this.props.history.replace(val.path)}\r\n                        />\r\n\r\n\r\n\r\n\r\n                    )\r\n                }\r\n            </TabBar>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(NavFooter)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { InputItem, List, NavBar, Grid, Icon } from 'antd-mobile'\r\n\r\nimport { sendMsg, readMsg } from '../../redux/action'\r\nconst Item = List.Item\r\nclass Chat extends Component {\r\n    state = {\r\n        connect: \"\",\r\n        isShow: false, //是否显示表情列表\r\n    }\r\n\r\n    handleSend = () => {\r\n        //收集数据\r\n        const from = this.props.user._id\r\n        const to = this.props.match.params.userid\r\n        const content = this.state.content.trim()\r\n        //发送消息\r\n        if (content) {\r\n            console.log(from)\r\n            console.log(to)\r\n            console.log(content)\r\n            this.props.sendMsg({ from, to, content })\r\n            this.setState({ content: '', isShow: false })\r\n        }\r\n    }\r\n    toggleShow = () => {\r\n        const isShow = !this.state.isShow\r\n        this.setState({ isShow })\r\n        if (isShow) {\r\n            setTimeout(() => {\r\n                window.dispatchEvent(new Event('resize'))\r\n            }, 0)\r\n        }\r\n    }\r\n    //选择表情\r\n    chooseEmoji = (item) => {\r\n\r\n        if (this.state.content) {\r\n            this.setState({ content: this.state.content + item.text })\r\n        } else {\r\n            this.setState({ content: item.text })\r\n        }\r\n\r\n    }\r\n    //在第一次render之前调用\r\n    componentWillMount() {\r\n        //初始化表情列表数据\r\n        const emojis = [\"😀\", \"😃\", \"😄\", \"😁\", \"😆\", \"🤣\", \"😂\", \"🙂\", \"😉\", \"😊\", \"😇\", \"🥰\", \"😍\", \"🤩\", \"😘\", \"😗\", \"😚\", \"😙\", \"😋\", \"😛\", \"😜\", \"🤪\", \"😝\", \"🤑\", \"🤗\", \"🤭\", \"🤫\", \"🤔\", \"🤐\", \"🤨\", \"😐\", \"😑\", \"😶\", \"😶\", \"😏\", \"😒\", \"🙄\", \"😬\"]\r\n        this.emojis = emojis.map(emoji => ({ text: emoji }))\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, document.body.scrollHeight)\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        window.scrollTo(0, document.body.scrollHeight)\r\n    }\r\n    componentWillUnmount() {\r\n        //发请求更新消息的未读\r\n        const from = this.props.match.params.userid\r\n        const to = this.props.user._id\r\n        this.props.readMsg(from, to)\r\n    }\r\n    render() {\r\n        const { user } = this.props\r\n        const { users, chatMsgs } = this.props.chat\r\n\r\n        //计算当前聊天的chat_id\r\n        const meId = user._id\r\n        const targetId = this.props.match.params.userid\r\n\r\n        //如果还没获取到数据，不做任何显示\r\n        if (!users[meId]) {\r\n            return null\r\n        }\r\n        const chatId = [meId, targetId].sort().join('_')\r\n        const msgs = chatMsgs.filter(val => val.chat_id === chatId)\r\n\r\n        const header = users[targetId].header ? `/images/${users[targetId].header}.jpg` : null\r\n        const targetName = users[targetId].username\r\n\r\n        return (\r\n            <div id=\"chat-page\">\r\n                <NavBar icon={<Icon type='left' />}\r\n                    className='sticky-header'\r\n                    onLeftClick={() => { this.props.history.goBack() }}\r\n                >{targetName}</NavBar>\r\n\r\n                <List style={{ marginTop: 50, marginBottom: 50 }}>\r\n\r\n                    {msgs.map(msg => {\r\n                        if (meId === msg.to) {\r\n                            return (\r\n                                <Item\r\n                                    key={msg._id}\r\n                                    thumb={<div className=\"header2\"><img src={header} /></div>}\r\n                                >\r\n                                    {msg.content}\r\n                                </Item>\r\n                            )\r\n                        } else {\r\n                            return (\r\n                                <Item\r\n                                    key={msg._id}\r\n                                    className=\"chat-me\"\r\n                                    extra='我'\r\n                                >\r\n                                    {msg.content}\r\n                                </Item>\r\n                            )\r\n                        }\r\n                    })}\r\n\r\n                </List>\r\n\r\n                <div className=\"am-tab-bar\">\r\n                    <InputItem\r\n                        placeholder=\"请输入\"\r\n                        onChange={val => this.setState({ content: val })}\r\n                        value={this.state.content}\r\n                        onFocus={() => { this.setState({ isShow: false }) }}\r\n                        extra={\r\n                            <span>\r\n                                <span onClick={this.toggleShow} style={{ marginRight: 5 }}>🙂</span>\r\n                                <span onClick={this.handleSend}>发送</span>\r\n\r\n                            </span>\r\n                        }>\r\n                    </InputItem>\r\n\r\n                    {this.state.isShow ? (<Grid\r\n                        data={this.emojis}\r\n                        columnNum={8}\r\n                        carouselMaxRow={4}\r\n                        isCarousel={true}\r\n                        onClick={(item) => {\r\n                            this.chooseEmoji(item)\r\n                        }}\r\n                    ></Grid>) : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    state => ({ user: state.user, chat: state.chat }),\r\n    { sendMsg, readMsg }\r\n)\r\n    (Chat)\r\n","import React, { Component } from 'react'\r\nimport DashenInfo from '../dashen-info/dashen-info'\r\nimport LaobanInfo from '../laoban-info/laoban-info'\r\nimport Laoban from '../laoban/laoban'\r\nimport Dashen from '../dashen/dashen'\r\nimport Message from '../message/message'\r\nimport Personal from '../personal/personal'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Cookies from 'js-cookie' //set() get() remove()\r\nimport { getRedirectTo } from '../../utils/index'\r\nimport { getUser } from '../../redux/action'\r\nimport { NavBar } from 'antd-mobile'\r\nimport NavFooter from '../../components/nav-footer/nav-footer'\r\nimport Chat from '../../containers/chat/chat'\r\nclass Main extends Component {\r\n    navList = [\r\n        {\r\n            path: '/laoban',\r\n            component: Laoban,\r\n            title: '大神列表',\r\n            icon: 'dashen',\r\n            text: '大神'\r\n        },\r\n        {\r\n            path: '/dashen',\r\n            component: Dashen,\r\n            title: '老板列表',\r\n            icon: 'laoban',\r\n            text: '老板'\r\n        },\r\n        {\r\n            path: '/message',\r\n            component: Message,\r\n            title: '消息列表',\r\n            icon: 'message',\r\n            text: '消息'\r\n        },\r\n        {\r\n            path: '/personal',\r\n            component: Personal,\r\n            title: '用户中心',\r\n            icon: 'personal',\r\n            text: '个人'\r\n        },\r\n\r\n    ]\r\n    componentDidMount() {\r\n        //  1.1如果cookie中有userid但redux中没有（即关闭过浏览器）,发请求获取对应的user\r\n        const userid = Cookies.get('userid')\r\n        const { id } = this.props.user\r\n        if (userid && !id) {\r\n            //发送异步请求，获取user\r\n            this.props.getUser()\r\n        }\r\n    }\r\n    render() {\r\n        //render中不能执行异步\r\n        //第一次执行render后会执行componentDidMount\r\n        //检查是否登录的操作放在main,是因为main是用户主页和用户完善页的上级路由，可以一劳永逸\r\n        // if (!this.props.user._id) {\r\n        //     return <Redirect to={'/login'} />\r\n        // }\r\n\r\n        //读取cookie中的userid\r\n        const userid = Cookies.get('userid')\r\n        //如果没有，自动重定向到登陆界面\r\n        // debugger\r\n        if (!userid) {\r\n            return <Redirect to='/login' />\r\n        }\r\n        //如果有，读取redux中的user\r\n        const { user, unReadCount } = this.props\r\n        //如果redux中的user有_id,显示对应的界面\r\n        if (user._id) {\r\n            //如果请求的是根路径，根据user的type和header来计算出一个重定向的路由路径\r\n            let path = this.props.location.pathname\r\n            if (path === '/') {\r\n\r\n                path = getRedirectTo(user.type, user.header)\r\n                return <Redirect to={path} />\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n\r\n        const { navList } = this\r\n        const path = this.props.location.pathname\r\n        const currentNav = navList.find(nav => nav.path === path)\r\n\r\n        if (currentNav) {\r\n            //决定哪个路由需要隐藏\r\n            if (user.type === 'laoban') {\r\n                navList[1].hide = true\r\n            } else {\r\n                navList[0].hide = true\r\n            }\r\n        }\r\n        return (\r\n\r\n\r\n            <div>\r\n                {currentNav ? <NavBar className=\"sticky-header\">{currentNav.title}</NavBar> : null}\r\n                <Switch>\r\n                    <Route path=\"/laoban\" component={(props) => <Laoban {...props} />}></Route>\r\n                    <Route path=\"/dashen\" component={(props) => <Dashen {...props} />}></Route>\r\n                    <Route path=\"/personal\" component={(props) => <Personal {...props} />}></Route>\r\n                    <Route path=\"/message\" component={(props) => <Message {...props} />}></Route>\r\n                    <Route path=\"/laobaninfo\" component={(props) => <LaobanInfo {...props} />}></Route>\r\n                    <Route path=\"/dasheninfo\" component={(props) => <DashenInfo {...props} />}></Route>\r\n                    <Route path=\"/chat/:userid\" component={(props) => <Chat {...props} />}></Route>\r\n\r\n\r\n                </Switch>\r\n                {currentNav ? <NavFooter navList={navList} unReadCount={unReadCount}></NavFooter> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ user: state.user, unReadCount: state.chat.unReadCount }),\r\n    { getUser }\r\n)(Main)\r\n\r\n// 1.实现自动登录\r\n//  1.1如果cookie中有userid但redux中没有（即关闭过浏览器）,发请求获取对应的user\r\n//  1.2如果cookie中没有userid,自动进入Login界面\r\n// 2.如果已经登录,重定向请求路径\r\n//  2.1 根据user的type和header来计算一个重定向路径，并自动重定向","import React, { Component } from 'react'\r\nimport Logo from '../../components/logo/logo'\r\nimport {\r\n    NavBar,\r\n    WingBlank,\r\n    List,\r\n    InputItem,\r\n    WhiteSpace,\r\n    Radio,\r\n    Button,\r\n} from 'antd-mobile'\r\n\r\nimport { register } from '../../redux/action'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nconst ListItem = List.Item\r\n\r\n\r\n\r\nclass Register extends Component {\r\n    state = {\r\n        username: '',\r\n        password: '',\r\n        password2: '',\r\n        type: '',\r\n    }\r\n    register = () => {\r\n\r\n        this.props.register(this.state)\r\n    }\r\n    handleChange = (name, val) => {\r\n        //更新状态\r\n        //因为这里传的name的字符串，所以要用[]接\r\n        this.setState({\r\n            [name]: val\r\n        })\r\n    }\r\n    //跳转登录\r\n    toLogin = () => {\r\n        this.props.history.push('/login')\r\n\r\n    }\r\n    render() {\r\n        const { type } = this.state\r\n        const { msg, redirectTo } = this.props.user\r\n        console.log(redirectTo)\r\n        if (redirectTo) {\r\n            return <Redirect to={redirectTo} />\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <NavBar>广&nbsp;工&nbsp;直&nbsp;聘</NavBar>\r\n                <Logo></Logo>\r\n                <WingBlank>\r\n                    <List>\r\n                        {msg ? <div className=\"error-msg\">{msg}</div> : null}\r\n                        <WhiteSpace />\r\n                        <InputItem placeholder=\"请输入用户名\" onChange={val => { this.handleChange('username', val) }}>用户名:</InputItem>\r\n                        <WhiteSpace />\r\n                        <InputItem placeholder=\"请输入密码\" type=\"password\" onChange={val => { this.handleChange('password', val) }}>密&nbsp;&nbsp;&nbsp;码:</InputItem>\r\n                        <WhiteSpace />\r\n                        <InputItem placeholder=\"请输入密码\" type=\"password\" onChange={val => { this.handleChange('password2', val) }}>确认密码:</InputItem>\r\n                        <WhiteSpace />\r\n                        <ListItem>\r\n                            <span>用户类型:</span>\r\n                            &nbsp;&nbsp;&nbsp;\r\n                            <Radio checked={type === \"dashen\"} onChange={() => this.handleChange('type', 'dashen')} >大神</Radio>\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <Radio checked={type === \"laoban\"} onChange={() => this.handleChange('type', 'laoban')}>老板</Radio>\r\n                        </ListItem>\r\n                        <WhiteSpace />\r\n                        <Button type=\"primary\" onClick={this.register}>注&nbsp;&nbsp;&nbsp;册</Button>\r\n                        <WhiteSpace />\r\n                        <Button onClick={this.toLogin}>已有账户</Button>\r\n                    </List>\r\n                </WingBlank>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ user: state.user }),\r\n    { register }\r\n)(Register)","// 包含n个reducers函数：根据老的state和指定的action返回一个新的state\r\n\r\n//合并reducer\r\nimport { combineReducers } from \"redux\";\r\n// import laobanInfo from \"../containers/laoban-info/laoban-info\";\r\nimport {\r\n    AUTH_SUCCESS,\r\n    ERROR_MSG,\r\n    RESET_USER,\r\n    RECEIVE_USER,\r\n    RECEIVE_USER_LIST,\r\n    RECEIVE_MSG_LIST,\r\n    RECEIVE_MSG,\r\n    MSG_READ\r\n} from './action-types'\r\nimport { getRedirectTo } from \"../utils\";\r\nconst initUser = {\r\n    username: '',\r\n    type: '',\r\n    msg: '',\r\n    redirectTo: ''//需要重定向的路径\r\n}\r\nconst initUserList = []\r\nconst initChat = {\r\n    users: {},\r\n    chatMsgs: [],\r\n    unReadCount: 0 //总的未读数量\r\n}\r\n//产生user的reducer\r\nfunction user(state = initUser, action) {\r\n    switch (action.type) {\r\n        case AUTH_SUCCESS:\r\n            const { type, header } = action.data\r\n            return { ...action.data, redirectTo: getRedirectTo(type, header) }\r\n        case ERROR_MSG:\r\n            return { ...state, msg: action.data }\r\n        case RECEIVE_USER:\r\n            return action.data\r\n        case RESET_USER:\r\n            return { ...initUser, msg: action.data }\r\n        default: return state\r\n    }\r\n\r\n}\r\n\r\n//产生userlist的reducer\r\nfunction userList(state = initUserList, action) {\r\n    switch (action.type) {\r\n        case RECEIVE_USER_LIST:\r\n            return action.data\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//产生与当前用户有关的聊天\r\nfunction chat(state = initChat, action) {\r\n    switch (action.type) {\r\n        case RECEIVE_MSG_LIST:\r\n            const { users, chatMsgs, userid } = action.data\r\n            return {\r\n                users,\r\n                chatMsgs,\r\n                unReadCount: chatMsgs.reduce((preTotal, msg) => preTotal + (!msg.read && msg.to === userid ? 1 : 0), 0)\r\n            }\r\n        case RECEIVE_MSG:\r\n            const { chatMsg } = action.data\r\n            return {\r\n                users: state.users,\r\n                chatMsgs: [...state.chatMsgs, chatMsg],\r\n                unReadCount: state.unReadCount + (!chatMsg.read && chatMsg.to === action.data.userid ? 1 : 0)\r\n            }\r\n        case MSG_READ:\r\n            const { count, from, to } = action.data\r\n\r\n            return {\r\n                users: state.users,\r\n                chatMsgs: state.chatMsgs.map(msg => {\r\n                    if (msg.from === from && msg.to === to) {\r\n                        return { ...msg, read: true }\r\n                    }\r\n                    return msg\r\n                }),\r\n                unReadCount: state.unReadCount - count\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n// redirectTo有四种情况\r\n//  /dashen  /laoban /dasheninfo /laobanInfo\r\n// 用header判断用不用去信息完善页面\r\n// 用type判断用户类型\r\n// function getRedirectTo(type, header) {\r\n//     let path = ''\r\n//     if (type === 'laoban') {\r\n//         path = '/laoban'\r\n//     } else {\r\n//         path = '/dashen'\r\n//     }\r\n\r\n//     if (!header) {\r\n//         path += 'info'\r\n//     }\r\n//     return path\r\n// }\r\n// function yyy(state = 0, action) {\r\n//     return state\r\n\r\n// }\r\n\r\nexport default combineReducers({\r\n    user,\r\n    userList,\r\n    chat\r\n})\r\n//向外暴漏的状态结构为：{user:{},userList:[]}","import { createStore, applyMiddleware } from 'redux'\r\nimport reducers from './reducers'\r\n\r\n//异步\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\n//向外暴漏store对象\r\nexport default createStore(reducers, composeWithDevTools(applyMiddleware(thunk)))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n// import App from './App';\nimport Login from './containers/login/login';\nimport Main from './containers/main/main';\nimport Register from './containers/register/register';\n\nimport './assets/css/index.css'\n//引入store\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n//最后在最外层包provider,再传入store\n// import './test/socketio_test'\nReactDOM.render(\n\n  <Provider store={store}>\n    <HashRouter>\n      <Switch>\n        <Route path=\"/login\" component={(props) => <Login {...props} />}></Route>\n        <Route path=\"/register\" component={(props) => <Register {...props} />}></Route>\n        <Route path=\"/\" component={(props) => <Main {...props} />}></Route>  {/* 默认组件 */}\n\n\n      </Switch>\n    </HashRouter>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}